worker_processes 1;
daemon off; 
events { worker_connections 1024; }


http {
    include /etc/nginx/mime.types;
    server_tokens off;
    sendfile on;

    # ========== START Other security work (https://gist.github.com/plentz/6737338) (this is duped in the https server block) https://blog.g3rt.nl/nginx-add_header-pitfall.html
        add_header X-Frame-Options SAMEORIGIN; #stops the site from being loaded in iframes
        add_header X-Content-Type-Options nosniff; #stop browsers from reading some content types as executables? 
        add_header X-XSS-Protection "1; mode=block"; #re-enables xss browser filter in case the user has it turned off
        
        add_header 'Content-Security-Policy' 'default-src self https; 
            script-src self; 
            style-src self; 
            img-src none; 
            font-src self; 
            frame-src self; 
            connect-src self; 
            object-src none;';
    # ========== END Other security work

    # Logging Settings
    access_log /var/log/nginx/access.log;
    error_log /var/log/nginx/error.log;

    gzip              on;
    gzip_vary         on;
    gzip_http_version 1.0;
    gzip_proxied      any;
    gzip_min_length   500;
    gzip_disable      "MSIE [1-6]\.";
    gzip_types        text/plain text/xml text/css
                      text/comma-separated-values
                      text/javascript
                      application/x-javascript
                      application/atom+xml;

    resolver 8.8.8.8;
    resolver_timeout 10s;

    # List of application servers
    # Need to put together a startup script that will test for the availablility of upstream servers before starting nginx
    # because, when nginx tries to start, Docker has not yet written the host file or the api server has not yet managed to start
    # so nginx will refuse to start
    upstream apiservers {
        server api:3030 fail_timeout=60s max_fails=2;
    }

    server {
        listen 80 default_server;
        listen [::]:80 default_server;
        server_name _;

        # Redirect all HTTP requests to HTTPS with a 301 Moved Permanently response.
        return 301 https://$host$request_uri;
    }
        
    server {

        # ========== START HTTPS 
            listen 443 ssl http2;
            listen [::]:443 ssl http2;


            # certs sent to the client in SERVER HELLO are concatenated in ssl_certificate
            ssl_certificate /root/ssl/live/demo.wikilogicfoundation.org/fullchain.pem; #/path/to/signed_cert_plus_intermediates;
            ssl_certificate_key /root/ssl/live/demo.wikilogicfoundation.org/privkey.pem; #/path/to/private_key;
            ssl_session_timeout 1d;
            ssl_session_cache shared:SSL:50m;
            ssl_session_tickets off;

            # modern configuration. tweak to your needs.
            ssl_protocols TLSv1.2;
            ssl_ciphers 'ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256';
            ssl_prefer_server_ciphers on;


            # OCSP Stapling ---
            # fetch OCSP records from URL in ssl_certificate and cache them
            ssl_stapling on;
            ssl_stapling_verify on;

            ## verify chain of trust of OCSP response using Root CA and Intermediate certs
            ssl_trusted_certificate /root/ssl/live/demo.wikilogicfoundation.org/chain.pem; #/path/to/root_CA_cert_plus_intermediates;
        # ========== END HTTPS 

            # HSTS (ngx_http_headers_module is required) (15768000 seconds = 6 months) - set browsers to really really use https
            add_header Strict-Transport-Security "max-age=15768000; includeSubDomains" always;

        # ========== START Other security work (https://gist.github.com/plentz/6737338) (this is duped in the parent http block) https://blog.g3rt.nl/nginx-add_header-pitfall.html
            add_header X-Frame-Options SAMEORIGIN; #stops the site from being loaded in iframes
            add_header X-Content-Type-Options nosniff; #stop browsers from reading some content types as executables? 
            add_header X-XSS-Protection "1; mode=block"; #re-enables xss browser filter in case the user has it turned off
            add_header 'Content-Security-Policy' 'default-src self https; 
                script-src self; 
                style-src self; 
                img-src none; 
                font-src self; 
                frame-src self; 
                connect-src self; 
                object-src none;';
        # ========== END Other security work

        root /var/www/app;

        # auth_basic "Restricted Content";
        # auth_basic_user_file /etc/nginx/.htpasswd;

        location /api {

            proxy_pass         http://apiservers;
            proxy_redirect     off;
            proxy_set_header   Host $host;
            proxy_set_header   X-Real-IP $remote_addr;
            proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header   X-Forwarded-Host $server_name;

        }
    }
}